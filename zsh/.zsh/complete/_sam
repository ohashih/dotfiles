#compdef sam
compdef _sam sam

# _sam: Zsh用のAWS SAM CLIの補完関数
_sam() {
  local -a commands
  local curcontext="$curcontext" state state_descr line
  local -A opt_args

  _arguments -C \
    '1: :->first' \
    '2: :->second' \
    '3: :->third' \
    '4: :->fourth' \
    '*:: :->options'

  case $state in
    first)
      commands=(docs init build local validate sync remote package deploy logs traces list delete pipeline publish help)
      _describe 'commands' commands
      return
      ;;
    second)
      case $words[2] in
        docs)
          commands=("config" "build" "local" "local invoke" "local start-api" "local start" "local start-lambda" "list" "list stack-outputs" "list endpoints" "list resource" "deploy" "remote invoke" "package" "delete" "sync" "publish" "validate" "init" "logs" "traces")
          ;;
        init)
          commands=("todo")
          ;;
        build)
          commands=("todo")
          ;;
        local)
          commands=("start-api" "invoke" "generate-event" "help")
          ;;
        validate)
          _files
          return
          ;;
        sync)
          commands=("todo")
          ;;
        remote)
          commands=("todo")
          ;;
        package)
          commands=("--template-file" "--s3-bucket" "--s3-prefix" "--kms-key-id" "--output-template-file" "--use-json" "--force-upload")
          ;;
        deploy)
          commands=("--template-file" "--stack-name" "--parameter-overrides" "--capabilities" "--no-execute-changeset" "--role-arn" "--notification-arns" "help")
          ;;
        logs)
          commands=("todo")
          ;;
        traces)
          commands=("todo")
          ;;
        list)
          commands=("todo")
          ;;
        delete)
          commands=("todo")
          ;;
        pipeline)
          commands=("todo")
          ;;
        publish)
          commands=("todo")
          ;;
      esac
      _describe 'commands' commands
      return
      ;;
    third)
      case $words[3] in
        generate-event)
          commands=("s3" "sns" "kinesis" "dynamodb" "api" "schedule" "-help")
          ;;
        invoke)
          commands=("--template" "--parameter-values" "--log-file" "--env-vars" "--event" "--debug-port" "--docker-volume-basedir" "--docker-network" "--skip-pull-image" "--profile")
          ;;
        start-api)
          commands=("--template" "--parameter-values" "--log-file" "--static-dir" "--port" "--host" "--env-vars" "--debug-port" "--docker-volume-basedir" "--docker-network" "--skip-pull-image" "--profile" "--prefix-routing")
          ;;
      esac
      _describe 'commands' commands
      return
      ;;
    fourth)
      case $words[3] in
        s3)
          commands=("--region" "--bucket" "--key")
          ;;
        kinesis)
          commands=("--region" "--partition" "--sequence" "--data")
          ;;
        dynamodb)
          commands=("--region")
          ;;
        api)
          commands=("--method" "--body" "--resource" "--path")
          ;;
        schedule)
          commands=("--region")
          ;;
        sns)
          commands=("--message" "--topic" "--subject")
          ;;
      esac
      _describe 'commands' commands
      return
      ;;
    options)
      case $words[CURRENT-1] in
        --template|--parameter-values|--log-file|--static-dir|--port|--host|--env-vars|--debug-port|--docker-volume-basedir|--docker-network|--profile|--template-file|--stack-name|--parameter-overrides|--capabilities|--no-execute-changeset|--role-arn|--notification-arns)
          _files
          return
          ;;
      esac
      ;;
  esac
}

compdef _sam sam
